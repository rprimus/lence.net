<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
<link rel="self" type="application/atom+xml" href="http://lence.net/github-lisp.atom"/>
<id>urn:rprimus:github:newlisprepos</id>
<updated>2021-10-02T00:02:16Z</updated>
<title type='text'>New GitHub Lisp Repos</title>
 <entry>
  <title>azimut: challenges</title>
  <author>
   <name>azimut</name>
  </author>
  <link href="https://github.com/azimut/challenges" />
  <id>urn:rprimus:github:azimut:challenges</id>
  <published>2021-10-02T00:02:16Z</published>
  <updated>2021-10-02T00:02:16Z</updated>
  <content type="html">
   
  </content>
 </entry>
 <entry>
  <title>azimut: quickproject-templates</title>
  <author>
   <name>azimut</name>
  </author>
  <link href="https://github.com/azimut/quickproject-templates" />
  <id>urn:rprimus:github:azimut:quickproject-templates</id>
  <published>2021-10-01T22:47:16Z</published>
  <updated>2021-10-01T22:47:16Z</updated>
  <content type="html">
   
  </content>
 </entry>
 <entry>
  <title>ablanco1950: SAT_propositional_logical_inference</title>
  <author>
   <name>ablanco1950</name>
  </author>
  <link href="https://github.com/ablanco1950/SAT_propositional_logical_inference" />
  <id>urn:rprimus:github:ablanco1950:SAT_propositional_logical_inference</id>
  <published>2021-10-01T18:50:29Z</published>
  <updated>2021-10-01T18:50:29Z</updated>
  <content type="html">
   SAT_propositional_logical_inference Obtaining the satisfaction of a knowledge base by a different procedure from the conventional one. Currently, it is usually passed from an expression in FBF (well-formed formula with literals separated by the connectors =&gt;, &lt;=&gt; ,  v, ^, Â¬ and parentheses) to an expression in FNC composed of clauses (literals separated by the or v operator) joined by the and ^ operator, following many steps: substitution of expressions joined by the =&gt; connectors by their equivalent  Boolean expression,  application of Morgan&#039;s laws ... etc. The method followed in  this application is: A new variable PPNIL is âcreatedâ, which the application considers as NIL but which prevents Lisp from considering it as NIL with the consequences it has in handling lists of considering it as an end of list. The values of each literal are substituted for T or PPNIL  as they correspond to True or Nil in the composition of literals to be tested. The following rules apply. Connector separated literals =&gt; The  expressions are True: T =&gt; T PPNIL =&gt; T PPNIL =&gt; PPNIL And Nil the rest. Literals separated by connector ï³ The expressions are True: Tï³T PPNILï³PPNIL And Nil the rest In the case of expressions joined by the v (or) connector, it is enough that one of the elements is T for it to consider the expression a T. In the case of connector ^ (and), it is enough that one of the variables is PPNIL for the expression to be considered false, that is, PPNIL. All this is done in the function valora-proposiciÃ³n-reducida-T-NIL (propos) function that determines whether a statement reduced to values T and PPNIL is true or false. As soon as it finds a list, it makes a recursive call to itself to obtain the T or PPNIL evaluation of the list. The function encuentra-modelos-p (kb) is the most important since it not only determines if the expression Kb that is passed to it is true or false, but it also gives the list of variables (interpretations) with T or PPNIL values that satisfy them . To do this, it uses the function extrae-simbolos( kb), which generates a list with all the possible values of the variables of the expression; genera-lista-interpretaciones, which generates all the possible combinations of variable values that can be given with T and PPNIL; and explora-todas-interpretaciones , listB kb, that successively calls interpretacion-modelo-p to check if it meets the interpretation of variable values to be passed. It is a &quot;brute force&quot; calculation system, it checks all the possibilities of assigning variables, so it is slower than systems that use DPLL (https://github.com/ablanco1950/DPLL_propositional_logical_inference) By using string handling functions in Lisp, the slowness is increased. Another notable function is reduce-T-NIL-proposicion (propos lst-reductor) function that receives expressions and converts variables to T or PPNIL values instead of variables. Use string handling functions in Lisp. If there is a list, it is called recursively to see the values in T or PPNIL of each of the variables. It uses the ls-reductor list that assigns each variable a T or PPNIL value TESTS: The tests have been implemented based on the examples that appear in the README.md, section 7, of https://github.com/bertuccio/inferencia-logica-proposicional Also based on the examples that appear in a link to netlogo that appears in http://www.cs.us.es/~fsancho/?e=120. Requirements: Allegro CL 10.1 Free Express Edition References:  https://github.com/bertuccio/inferencia-logica-proposicional by AdriÃ¡n Lorenzo Mateo (Bertuccio) who uses material from the Artificial Intelligence practices at the Higher Polytechnic School of the Autonomous University of Madrid. Informatics Engineering. http://www.cs.us.es/~fsancho/?e=120 by Fernando Sancho Caparrini. Higher Technical School of Computer Engineering of the University of Seville. https://github.com/ablanco1950/DPLL_propositional_logical_inference
  </content>
 </entry>
 <entry>
  <title>juan-reynoso: bootstrap-icons</title>
  <author>
   <name>juan-reynoso</name>
  </author>
  <link href="https://github.com/juan-reynoso/bootstrap-icons" />
  <id>urn:rprimus:github:juan-reynoso:bootstrap-icons</id>
  <published>2021-10-01T17:37:24Z</published>
  <updated>2021-10-01T17:37:24Z</updated>
  <content type="html">
   Hunchentoot and Bootstrap icons
  </content>
 </entry>
 <entry>
  <title>obordeau: IA01_TP1</title>
  <author>
   <name>obordeau</name>
  </author>
  <link href="https://github.com/obordeau/IA01_TP1" />
  <id>urn:rprimus:github:obordeau:IA01_TP1</id>
  <published>2021-10-01T16:35:03Z</published>
  <updated>2021-10-01T16:35:03Z</updated>
  <content type="html">
   
  </content>
 </entry>
 <entry>
  <title>taka-channel: calc-bmi</title>
  <author>
   <name>taka-channel</name>
  </author>
  <link href="https://github.com/taka-channel/calc-bmi" />
  <id>urn:rprimus:github:taka-channel:calc-bmi</id>
  <published>2021-10-01T14:09:21Z</published>
  <updated>2021-10-01T14:09:21Z</updated>
  <content type="html">
   Calculate BMI value
  </content>
 </entry>
 <entry>
  <title>ais-climber: refined-chef</title>
  <author>
   <name>ais-climber</name>
  </author>
  <link href="https://github.com/ais-climber/refined-chef" />
  <id>urn:rprimus:github:ais-climber:refined-chef</id>
  <published>2021-10-01T13:59:41Z</published>
  <updated>2021-10-01T13:59:41Z</updated>
  <content type="html">
   â³ Applying the neural-symbolic approach to learn more refined adaptation rules for the classic CBR system CHEF.
  </content>
 </entry>
 <entry>
  <title>nmunro: mtg-api</title>
  <author>
   <name>nmunro</name>
  </author>
  <link href="https://github.com/nmunro/mtg-api" />
  <id>urn:rprimus:github:nmunro:mtg-api</id>
  <published>2021-09-30T23:03:16Z</published>
  <updated>2021-09-30T23:03:16Z</updated>
  <content type="html">
   A Common Lisp library for magicthegathering.io
  </content>
 </entry>
 <entry>
  <title>frontierpsycho: set.lisp</title>
  <author>
   <name>frontierpsycho</name>
  </author>
  <link href="https://github.com/frontierpsycho/set.lisp" />
  <id>urn:rprimus:github:frontierpsycho:set.lisp</id>
  <published>2021-09-30T07:24:38Z</published>
  <updated>2021-09-30T07:24:38Z</updated>
  <content type="html">
   
  </content>
 </entry>
 <entry>
  <title>TheFausap: lisp801</title>
  <author>
   <name>TheFausap</name>
  </author>
  <link href="https://github.com/TheFausap/lisp801" />
  <id>urn:rprimus:github:TheFausap:lisp801</id>
  <published>2021-09-30T05:34:03Z</published>
  <updated>2021-09-30T05:34:03Z</updated>
  <content type="html">
   Based on tkalvas lisp500 and avshabanov/lisp800. It contains modifications in order to run the interpreter on 64bit machines
  </content>
 </entry>
 <entry>
  <title>AngelVI13: cddb</title>
  <author>
   <name>AngelVI13</name>
  </author>
  <link href="https://github.com/AngelVI13/cddb" />
  <id>urn:rprimus:github:AngelVI13:cddb</id>
  <published>2021-09-30T05:29:42Z</published>
  <updated>2021-09-30T05:29:42Z</updated>
  <content type="html">
   Follow-along to &quot;Practical Lisps&quot; book examples
  </content>
 </entry>
 <entry>
  <title>oneirophon: dotfiles</title>
  <author>
   <name>oneirophon</name>
  </author>
  <link href="https://github.com/oneirophon/dotfiles" />
  <id>urn:rprimus:github:oneirophon:dotfiles</id>
  <published>2021-09-30T02:52:46Z</published>
  <updated>2021-09-30T02:52:46Z</updated>
  <content type="html">
   
  </content>
 </entry>
</feed>
