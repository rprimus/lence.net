<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
<link rel="self" type="application/atom+xml" href="http://lence.net/github-lisp.atom"/>
<id>urn:rprimus:github:newlisprepos</id>
<updated>2023-12-22T09:03:55Z</updated>
<title type='text'>New GitHub Lisp Repos</title>
 <entry>
  <title>owenrya-n: WB-LNA</title>
  <author>
   <name>owenrya-n</name>
  </author>
  <link href="https://github.com/owenrya-n/WB-LNA" />
  <id>urn:rprimus:github:owenrya-n:WB-LNA</id>
  <published>2023-12-22T09:03:55Z</published>
  <updated>2023-12-22T09:03:55Z</updated>
  <content type="html">
   
  </content>
 </entry>
 <entry>
  <title>eurochriskelly: cadder</title>
  <author>
   <name>eurochriskelly</name>
  </author>
  <link href="https://github.com/eurochriskelly/cadder" />
  <id>urn:rprimus:github:eurochriskelly:cadder</id>
  <published>2023-12-22T06:46:30Z</published>
  <updated>2023-12-22T06:46:30Z</updated>
  <content type="html">
   Useful lisp scripts for improved CAD productivity
  </content>
 </entry>
 <entry>
  <title>bajtyibity: paradygmaty-programowania-clisp-lab6</title>
  <author>
   <name>bajtyibity</name>
  </author>
  <link href="https://github.com/bajtyibity/paradygmaty-programowania-clisp-lab6" />
  <id>urn:rprimus:github:bajtyibity:paradygmaty-programowania-clisp-lab6</id>
  <published>2023-12-21T23:10:45Z</published>
  <updated>2023-12-21T23:10:45Z</updated>
  <content type="html">
   
  </content>
 </entry>
 <entry>
  <title>cauemmo: Exercicios-CLISP</title>
  <author>
   <name>cauemmo</name>
  </author>
  <link href="https://github.com/cauemmo/Exercicios-CLISP" />
  <id>urn:rprimus:github:cauemmo:Exercicios-CLISP</id>
  <published>2023-12-21T22:43:27Z</published>
  <updated>2023-12-21T22:43:27Z</updated>
  <content type="html">
   
  </content>
 </entry>
 <entry>
  <title>vlad-km: star-trek</title>
  <author>
   <name>vlad-km</name>
  </author>
  <link href="https://github.com/vlad-km/star-trek" />
  <id>urn:rprimus:github:vlad-km:star-trek</id>
  <published>2023-12-21T17:09:44Z</published>
  <updated>2023-12-21T17:09:44Z</updated>
  <content type="html">
   Start trek game rewriten from oldscool BASIC to Common Lisp
  </content>
 </entry>
 <entry>
  <title>IsaacGemal: UsefulAutoLISP</title>
  <author>
   <name>IsaacGemal</name>
  </author>
  <link href="https://github.com/IsaacGemal/UsefulAutoLISP" />
  <id>urn:rprimus:github:IsaacGemal:UsefulAutoLISP</id>
  <published>2023-12-21T01:46:59Z</published>
  <updated>2023-12-21T01:46:59Z</updated>
  <content type="html">
   Useful AutoLISP scripts I&#039;ve written or found while working with autocad
  </content>
 </entry>
 <entry>
  <title>dradicchi: shortest-path-searching</title>
  <author>
   <name>dradicchi</name>
  </author>
  <link href="https://github.com/dradicchi/shortest-path-searching" />
  <id>urn:rprimus:github:dradicchi:shortest-path-searching</id>
  <published>2023-12-21T00:52:59Z</published>
  <updated>2023-12-21T00:52:59Z</updated>
  <content type="html">
   An implementation to &quot;shortest-path&quot; searching solution, with breadth-first approach, to search in two-way networks.
  </content>
 </entry>
 <entry>
  <title>ysulsky: cinline</title>
  <author>
   <name>ysulsky</name>
  </author>
  <link href="https://github.com/ysulsky/cinline" />
  <id>urn:rprimus:github:ysulsky:cinline</id>
  <published>2023-12-20T19:59:07Z</published>
  <updated>2023-12-20T19:59:07Z</updated>
  <content type="html">
   Inline C support for Common Lisp
  </content>
 </entry>
 <entry>
  <title>albertolerda: nacl-from-cl</title>
  <author>
   <name>albertolerda</name>
  </author>
  <link href="https://github.com/albertolerda/nacl-from-cl" />
  <id>urn:rprimus:github:albertolerda:nacl-from-cl</id>
  <published>2023-12-20T19:39:16Z</published>
  <updated>2023-12-20T19:39:16Z</updated>
  <content type="html">
   
  </content>
 </entry>
 <entry>
  <title>madnificent: test-resources-cache-keys</title>
  <author>
   <name>madnificent</name>
  </author>
  <link href="https://github.com/madnificent/test-resources-cache-keys" />
  <id>urn:rprimus:github:madnificent:test-resources-cache-keys</id>
  <published>2023-12-20T14:24:44Z</published>
  <updated>2023-12-20T14:24:44Z</updated>
  <content type="html">
   
  </content>
 </entry>
 <entry>
  <title>Harikamatta: autolisp</title>
  <author>
   <name>Harikamatta</name>
  </author>
  <link href="https://github.com/Harikamatta/autolisp" />
  <id>urn:rprimus:github:Harikamatta:autolisp</id>
  <published>2023-12-20T07:18:33Z</published>
  <updated>2023-12-20T07:18:33Z</updated>
  <content type="html">
   
  </content>
 </entry>
 <entry>
  <title>Junker: hashids</title>
  <author>
   <name>Junker</name>
  </author>
  <link href="https://github.com/Junker/hashids" />
  <id>urn:rprimus:github:Junker:hashids</id>
  <published>2023-12-20T06:23:24Z</published>
  <updated>2023-12-20T06:23:24Z</updated>
  <content type="html">
   Common Lisp system to generate YouTube-like hashes from one or many numbers
  </content>
 </entry>
 <entry>
  <title>CaryRock: AdventOfCode2023</title>
  <author>
   <name>CaryRock</name>
  </author>
  <link href="https://github.com/CaryRock/AdventOfCode2023" />
  <id>urn:rprimus:github:CaryRock:AdventOfCode2023</id>
  <published>2023-12-20T01:06:47Z</published>
  <updated>2023-12-20T01:06:47Z</updated>
  <content type="html">
   Master folder for holding the solutions for the 2023 Advent of Code challenges in the various languages I try it in.
  </content>
 </entry>
</feed>
