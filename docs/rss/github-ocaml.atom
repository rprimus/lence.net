<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
<link rel="self" type="application/atom+xml" href="http://lence.net/github-ocaml.atom"/>
<id>urn:rprimus:github:newocamlrepos</id>
<updated>2022-07-09T08:26:59Z</updated>
<title type='text'>New GitHub Ocaml Repos</title>
 <entry>
  <title>yimin-zhao: ocaml-playground</title>
  <author>
   <name>yimin-zhao</name>
  </author>
  <link href="https://github.com/yimin-zhao/ocaml-playground" />
  <id>urn:rprimus:github:yimin-zhao:ocaml-playground</id>
  <published>2022-07-09T08:26:59Z</published>
  <updated>2022-07-09T08:26:59Z</updated>
  <content type="html">
   
  </content>
 </entry>
 <entry>
  <title>ecooler: OCamal-Lambda-Calculus-hw7-MiniML</title>
  <author>
   <name>ecooler</name>
  </author>
  <link href="https://github.com/ecooler/OCamal-Lambda-Calculus-hw7-MiniML" />
  <id>urn:rprimus:github:ecooler:OCamal-Lambda-Calculus-hw7-MiniML</id>
  <published>2022-07-09T07:08:30Z</published>
  <updated>2022-07-09T07:08:30Z</updated>
  <content type="html">
   
  </content>
 </entry>
 <entry>
  <title>ecooler: ocaml-hw06-silemie</title>
  <author>
   <name>ecooler</name>
  </author>
  <link href="https://github.com/ecooler/ocaml-hw06-silemie" />
  <id>urn:rprimus:github:ecooler:ocaml-hw06-silemie</id>
  <published>2022-07-09T06:34:17Z</published>
  <updated>2022-07-09T06:34:17Z</updated>
  <content type="html">
   
  </content>
 </entry>
 <entry>
  <title>nms86: Ocaml-Connect4</title>
  <author>
   <name>nms86</name>
  </author>
  <link href="https://github.com/nms86/Ocaml-Connect4" />
  <id>urn:rprimus:github:nms86:Ocaml-Connect4</id>
  <published>2022-07-08T19:29:20Z</published>
  <updated>2022-07-08T19:29:20Z</updated>
  <content type="html">
   Using functional programming, I coded a game of connect4 and made a computer player that uses several heuristics to try to beat you. Has terminal UI and 800 lines of unit tests.
  </content>
 </entry>
 <entry>
  <title>janestreet: ppx_stable_witness</title>
  <author>
   <name>janestreet</name>
  </author>
  <link href="https://github.com/janestreet/ppx_stable_witness" />
  <id>urn:rprimus:github:janestreet:ppx_stable_witness</id>
  <published>2022-07-08T18:54:22Z</published>
  <updated>2022-07-08T18:54:22Z</updated>
  <content type="html">
   Ppx extension for deriving a witness that a type is intended to be stable
  </content>
 </entry>
 <entry>
  <title>Evawn: GardenGame</title>
  <author>
   <name>Evawn</name>
  </author>
  <link href="https://github.com/Evawn/GardenGame" />
  <id>urn:rprimus:github:Evawn:GardenGame</id>
  <published>2022-07-08T18:48:26Z</published>
  <updated>2022-07-08T18:48:26Z</updated>
  <content type="html">
   Simple &#039;Stardew Valley&#039; - Inspired Gardening Game using OCaml
  </content>
 </entry>
 <entry>
  <title>janestreet: trie</title>
  <author>
   <name>janestreet</name>
  </author>
  <link href="https://github.com/janestreet/trie" />
  <id>urn:rprimus:github:janestreet:trie</id>
  <published>2022-07-08T18:40:40Z</published>
  <updated>2022-07-08T18:40:40Z</updated>
  <content type="html">
   Trie data structure library
  </content>
 </entry>
 <entry>
  <title>janestreet: tilde_f</title>
  <author>
   <name>janestreet</name>
  </author>
  <link href="https://github.com/janestreet/tilde_f" />
  <id>urn:rprimus:github:janestreet:tilde_f</id>
  <published>2022-07-08T18:40:39Z</published>
  <updated>2022-07-08T18:40:39Z</updated>
  <content type="html">
   Provides a let-syntax for continuation-passing style.
  </content>
 </entry>
 <entry>
  <title>janestreet: streamable</title>
  <author>
   <name>janestreet</name>
  </author>
  <link href="https://github.com/janestreet/streamable" />
  <id>urn:rprimus:github:janestreet:streamable</id>
  <published>2022-07-08T18:40:37Z</published>
  <updated>2022-07-08T18:40:37Z</updated>
  <content type="html">
   A collection of types suitable for incremental serialization.
  </content>
 </entry>
 <entry>
  <title>janestreet: ppx_dotnet_bin_prot</title>
  <author>
   <name>janestreet</name>
  </author>
  <link href="https://github.com/janestreet/ppx_dotnet_bin_prot" />
  <id>urn:rprimus:github:janestreet:ppx_dotnet_bin_prot</id>
  <published>2022-07-08T18:40:36Z</published>
  <updated>2022-07-08T18:40:36Z</updated>
  <content type="html">
   Generation of F# bin_prot readers and writers from OCaml types
  </content>
 </entry>
 <entry>
  <title>janestreet: ppx_derive_at_runtime</title>
  <author>
   <name>janestreet</name>
  </author>
  <link href="https://github.com/janestreet/ppx_derive_at_runtime" />
  <id>urn:rprimus:github:janestreet:ppx_derive_at_runtime</id>
  <published>2022-07-08T18:40:34Z</published>
  <updated>2022-07-08T18:40:34Z</updated>
  <content type="html">
   Define a new ppx deriver by naming a runtime module.
  </content>
 </entry>
 <entry>
  <title>janestreet: of_json</title>
  <author>
   <name>janestreet</name>
  </author>
  <link href="https://github.com/janestreet/of_json" />
  <id>urn:rprimus:github:janestreet:of_json</id>
  <published>2022-07-08T18:40:33Z</published>
  <updated>2022-07-08T18:40:33Z</updated>
  <content type="html">
   A friendly applicative interface for Jsonaf.
  </content>
 </entry>
 <entry>
  <title>janestreet: numeric_string</title>
  <author>
   <name>janestreet</name>
  </author>
  <link href="https://github.com/janestreet/numeric_string" />
  <id>urn:rprimus:github:janestreet:numeric_string</id>
  <published>2022-07-08T18:40:31Z</published>
  <updated>2022-07-08T18:40:31Z</updated>
  <content type="html">
   A comparison function for strings that sorts numeric fragments of strings according to their numeric value, so that e.g. &quot;abc2&quot; &lt; &quot;abc10&quot;.
  </content>
 </entry>
 <entry>
  <title>janestreet: n_ary</title>
  <author>
   <name>janestreet</name>
  </author>
  <link href="https://github.com/janestreet/n_ary" />
  <id>urn:rprimus:github:janestreet:n_ary</id>
  <published>2022-07-08T18:40:30Z</published>
  <updated>2022-07-08T18:40:30Z</updated>
  <content type="html">
   A library for N-ary datatypes and operations.
  </content>
 </entry>
 <entry>
  <title>janestreet: csv</title>
  <author>
   <name>janestreet</name>
  </author>
  <link href="https://github.com/janestreet/csv" />
  <id>urn:rprimus:github:janestreet:csv</id>
  <published>2022-07-08T18:40:23Z</published>
  <updated>2022-07-08T18:40:23Z</updated>
  <content type="html">
   Tools for working with CSVs on the command line
  </content>
 </entry>
 <entry>
  <title>janestreet: cpuid</title>
  <author>
   <name>janestreet</name>
  </author>
  <link href="https://github.com/janestreet/cpuid" />
  <id>urn:rprimus:github:janestreet:cpuid</id>
  <published>2022-07-08T18:40:22Z</published>
  <updated>2022-07-08T18:40:22Z</updated>
  <content type="html">
   A library for parsing CPU capabilities out of the `cpuid` instruction.
  </content>
 </entry>
 <entry>
  <title>janestreet: bidirectional_map</title>
  <author>
   <name>janestreet</name>
  </author>
  <link href="https://github.com/janestreet/bidirectional_map" />
  <id>urn:rprimus:github:janestreet:bidirectional_map</id>
  <published>2022-07-08T18:40:20Z</published>
  <updated>2022-07-08T18:40:20Z</updated>
  <content type="html">
   A library for bidirectional maps and multimaps.
  </content>
 </entry>
 <entry>
  <title>janestreet: babel</title>
  <author>
   <name>janestreet</name>
  </author>
  <link href="https://github.com/janestreet/babel" />
  <id>urn:rprimus:github:janestreet:babel</id>
  <published>2022-07-08T18:40:19Z</published>
  <updated>2022-07-08T18:40:19Z</updated>
  <content type="html">
   A library for defining Rpcs that can evolve over time without breaking backward compatibility.
  </content>
 </entry>
 <entry>
  <title>simonomnes: ResJeu</title>
  <author>
   <name>simonomnes</name>
  </author>
  <link href="https://github.com/simonomnes/ResJeu" />
  <id>urn:rprimus:github:simonomnes:ResJeu</id>
  <published>2022-07-08T11:01:55Z</published>
  <updated>2022-07-08T11:01:55Z</updated>
  <content type="html">
   
  </content>
 </entry>
 <entry>
  <title>jjh84: ocaml-calc</title>
  <author>
   <name>jjh84</name>
  </author>
  <link href="https://github.com/jjh84/ocaml-calc" />
  <id>urn:rprimus:github:jjh84:ocaml-calc</id>
  <published>2022-07-08T06:41:48Z</published>
  <updated>2022-07-08T06:41:48Z</updated>
  <content type="html">
   
  </content>
 </entry>
 <entry>
  <title>julionm: ocaml-projects</title>
  <author>
   <name>julionm</name>
  </author>
  <link href="https://github.com/julionm/ocaml-projects" />
  <id>urn:rprimus:github:julionm:ocaml-projects</id>
  <published>2022-07-08T01:20:26Z</published>
  <updated>2022-07-08T01:20:26Z</updated>
  <content type="html">
   OCaml studies
  </content>
 </entry>
 <entry>
  <title>luke36: SealCompiler</title>
  <author>
   <name>luke36</name>
  </author>
  <link href="https://github.com/luke36/SealCompiler" />
  <id>urn:rprimus:github:luke36:SealCompiler</id>
  <published>2022-07-07T16:11:18Z</published>
  <updated>2022-07-07T16:11:18Z</updated>
  <content type="html">
   A very simple compiler for a very simple programming language (No functions). Almost no optimization.
  </content>
 </entry>
 <entry>
  <title>jack-lavelle: personal-course-projects</title>
  <author>
   <name>jack-lavelle</name>
  </author>
  <link href="https://github.com/jack-lavelle/personal-course-projects" />
  <id>urn:rprimus:github:jack-lavelle:personal-course-projects</id>
  <published>2022-07-07T16:10:25Z</published>
  <updated>2022-07-07T16:10:25Z</updated>
  <content type="html">
   These are projects that I have done on my own in either classes or my free time.
  </content>
 </entry>
 <entry>
  <title>Deducteam: sttfaxport</title>
  <author>
   <name>Deducteam</name>
  </author>
  <link href="https://github.com/Deducteam/sttfaxport" />
  <id>urn:rprimus:github:Deducteam:sttfaxport</id>
  <published>2022-07-07T13:43:22Z</published>
  <updated>2022-07-07T13:43:22Z</updated>
  <content type="html">
   
  </content>
 </entry>
 <entry>
  <title>thata: tapl</title>
  <author>
   <name>thata</name>
  </author>
  <link href="https://github.com/thata/tapl" />
  <id>urn:rprimus:github:thata:tapl</id>
  <published>2022-07-07T09:27:35Z</published>
  <updated>2022-07-07T09:27:35Z</updated>
  <content type="html">
   
  </content>
 </entry>
 <entry>
  <title>lucreziasorrentino: ocaml_exercises</title>
  <author>
   <name>lucreziasorrentino</name>
  </author>
  <link href="https://github.com/lucreziasorrentino/ocaml_exercises" />
  <id>urn:rprimus:github:lucreziasorrentino:ocaml_exercises</id>
  <published>2022-07-07T08:48:57Z</published>
  <updated>2022-07-07T08:48:57Z</updated>
  <content type="html">
   
  </content>
 </entry>
 <entry>
  <title>hayeon7898: hi</title>
  <author>
   <name>hayeon7898</name>
  </author>
  <link href="https://github.com/hayeon7898/hi" />
  <id>urn:rprimus:github:hayeon7898:hi</id>
  <published>2022-07-07T07:05:00Z</published>
  <updated>2022-07-07T07:05:00Z</updated>
  <content type="html">
   
  </content>
 </entry>
 <entry>
  <title>ecooler: OCaml-assignment3-interpreter</title>
  <author>
   <name>ecooler</name>
  </author>
  <link href="https://github.com/ecooler/OCaml-assignment3-interpreter" />
  <id>urn:rprimus:github:ecooler:OCaml-assignment3-interpreter</id>
  <published>2022-07-07T05:44:37Z</published>
  <updated>2022-07-07T05:44:37Z</updated>
  <content type="html">
   
  </content>
 </entry>
</feed>
