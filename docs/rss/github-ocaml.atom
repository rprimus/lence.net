<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
<link rel="self" type="application/atom+xml" href="http://lence.net/github-ocaml.atom"/>
<id>urn:rprimus:github:newocamlrepos</id>
<updated>2021-06-20T03:05:53Z</updated>
<title type='text'>New GitHub Ocaml Repos</title>
 <entry>
  <title>murphywarner: tautologyChecker</title>
  <author>
   <name>murphywarner</name>
  </author>
  <link href="https://github.com/murphywarner/tautologyChecker" />
  <id>urn:rprimus:github:murphywarner:tautologyChecker</id>
  <published>2021-06-20T03:05:53Z</published>
  <updated>2021-06-20T03:05:53Z</updated>
  <content type="html">
   OCaml solution to finding if proposition is a tautology.
  </content>
 </entry>
 <entry>
  <title>jawline: ocamlLlvmLispJit</title>
  <author>
   <name>jawline</name>
  </author>
  <link href="https://github.com/jawline/ocamlLlvmLispJit" />
  <id>urn:rprimus:github:jawline:ocamlLlvmLispJit</id>
  <published>2021-06-20T02:59:36Z</published>
  <updated>2021-06-20T02:59:36Z</updated>
  <content type="html">
   A small LISP-like programming language with a JIT engine backed by LLVM
  </content>
 </entry>
 <entry>
  <title>ifazk: mula</title>
  <author>
   <name>ifazk</name>
  </author>
  <link href="https://github.com/ifazk/mula" />
  <id>urn:rprimus:github:ifazk:mula</id>
  <published>2021-06-19T19:14:00Z</published>
  <updated>2021-06-19T19:14:00Z</updated>
  <content type="html">
   ML&#039;s radishal library for matching with Universal Levenshtein Automata.
  </content>
 </entry>
 <entry>
  <title>bnslmn: bst-compression</title>
  <author>
   <name>bnslmn</name>
  </author>
  <link href="https://github.com/bnslmn/bst-compression" />
  <id>urn:rprimus:github:bnslmn:bst-compression</id>
  <published>2021-06-19T12:34:07Z</published>
  <updated>2021-06-19T12:34:07Z</updated>
  <content type="html">
   
  </content>
 </entry>
 <entry>
  <title>IsmaVerde: Practicas-PP</title>
  <author>
   <name>IsmaVerde</name>
  </author>
  <link href="https://github.com/IsmaVerde/Practicas-PP" />
  <id>urn:rprimus:github:IsmaVerde:Practicas-PP</id>
  <published>2021-06-19T12:07:43Z</published>
  <updated>2021-06-19T12:07:43Z</updated>
  <content type="html">
   PrÃ¡cticas de Paradigmas de la ProgramaciÃ³n de 2Âº de carrera
  </content>
 </entry>
 <entry>
  <title>tianrui98: Memory-Allocator</title>
  <author>
   <name>tianrui98</name>
  </author>
  <link href="https://github.com/tianrui98/Memory-Allocator" />
  <id>urn:rprimus:github:tianrui98:Memory-Allocator</id>
  <published>2021-06-19T07:17:18Z</published>
  <updated>2021-06-19T07:17:18Z</updated>
  <content type="html">
   A memory allocator that allows for storing and retrieving integers, strings, and pointers in the memory without using OCaml reference.  Linked data structures are built based on the allocator.
  </content>
 </entry>
 <entry>
  <title>nogw: learn-ocaml</title>
  <author>
   <name>nogw</name>
  </author>
  <link href="https://github.com/nogw/learn-ocaml" />
  <id>urn:rprimus:github:nogw:learn-ocaml</id>
  <published>2021-06-18T23:39:24Z</published>
  <updated>2021-06-18T23:39:24Z</updated>
  <content type="html">
   
  </content>
 </entry>
 <entry>
  <title>AppleDevlopment: AppleDevlopment</title>
  <author>
   <name>AppleDevlopment</name>
  </author>
  <link href="https://github.com/AppleDevlopment/AppleDevlopment" />
  <id>urn:rprimus:github:AppleDevlopment:AppleDevlopment</id>
  <published>2021-06-18T21:34:22Z</published>
  <updated>2021-06-18T21:34:22Z</updated>
  <content type="html">
   
  </content>
 </entry>
 <entry>
  <title>InfiniteSwerve: potatokeet</title>
  <author>
   <name>InfiniteSwerve</name>
  </author>
  <link href="https://github.com/InfiniteSwerve/potatokeet" />
  <id>urn:rprimus:github:InfiniteSwerve:potatokeet</id>
  <published>2021-06-18T20:47:13Z</published>
  <updated>2021-06-18T20:47:13Z</updated>
  <content type="html">
   Interpreter for a basic language potato 
  </content>
 </entry>
 <entry>
  <title>erardlucien: ocaml_exe</title>
  <author>
   <name>erardlucien</name>
  </author>
  <link href="https://github.com/erardlucien/ocaml_exe" />
  <id>urn:rprimus:github:erardlucien:ocaml_exe</id>
  <published>2021-06-18T20:39:21Z</published>
  <updated>2021-06-18T20:39:21Z</updated>
  <content type="html">
   
  </content>
 </entry>
 <entry>
  <title>janestreet: ocaml_intrinsics</title>
  <author>
   <name>janestreet</name>
  </author>
  <link href="https://github.com/janestreet/ocaml_intrinsics" />
  <id>urn:rprimus:github:janestreet:ocaml_intrinsics</id>
  <published>2021-06-18T19:04:50Z</published>
  <updated>2021-06-18T19:04:50Z</updated>
  <content type="html">
   Provides functions to invoke amd64 instructions (such as clz,popcnt,rdtsc,rdpmc) when available, or compatible software implementation on other targets.
  </content>
 </entry>
 <entry>
  <title>HasanSelb: random-project</title>
  <author>
   <name>HasanSelb</name>
  </author>
  <link href="https://github.com/HasanSelb/random-project" />
  <id>urn:rprimus:github:HasanSelb:random-project</id>
  <published>2021-06-18T18:25:55Z</published>
  <updated>2021-06-18T18:25:55Z</updated>
  <content type="html">
   
  </content>
 </entry>
</feed>
