<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
<link rel="self" type="application/atom+xml" href="http://lence.net/github-ocaml.atom"/>
<id>urn:rprimus:github:newocamlrepos</id>
<updated>2023-11-20T04:46:08Z</updated>
<title type='text'>New GitHub Ocaml Repos</title>
 <entry>
  <title>aherby1: testing</title>
  <author>
   <name>aherby1</name>
  </author>
  <link href="https://github.com/aherby1/testing" />
  <id>urn:rprimus:github:aherby1:testing</id>
  <published>2023-11-20T04:46:08Z</published>
  <updated>2023-11-20T04:46:08Z</updated>
  <content type="html">
   
  </content>
 </entry>
 <entry>
  <title>bord-o: camltracing</title>
  <author>
   <name>bord-o</name>
  </author>
  <link href="https://github.com/bord-o/camltracing" />
  <id>urn:rprimus:github:bord-o:camltracing</id>
  <published>2023-11-20T01:16:22Z</published>
  <updated>2023-11-20T01:16:22Z</updated>
  <content type="html">
   implementing a raytracer in ocaml
  </content>
 </entry>
 <entry>
  <title>mkramarz: stlc</title>
  <author>
   <name>mkramarz</name>
  </author>
  <link href="https://github.com/mkramarz/stlc" />
  <id>urn:rprimus:github:mkramarz:stlc</id>
  <published>2023-11-20T00:17:14Z</published>
  <updated>2023-11-20T00:17:14Z</updated>
  <content type="html">
   A small demonstration of the STLC in OCaml.
  </content>
 </entry>
 <entry>
  <title>moha1747: ProjOcaml_1</title>
  <author>
   <name>moha1747</name>
  </author>
  <link href="https://github.com/moha1747/ProjOcaml_1" />
  <id>urn:rprimus:github:moha1747:ProjOcaml_1</id>
  <published>2023-11-20T00:13:11Z</published>
  <updated>2023-11-20T00:13:11Z</updated>
  <content type="html">
   
  </content>
 </entry>
 <entry>
  <title>ngmymy: expression</title>
  <author>
   <name>ngmymy</name>
  </author>
  <link href="https://github.com/ngmymy/expression" />
  <id>urn:rprimus:github:ngmymy:expression</id>
  <published>2023-11-19T23:05:55Z</published>
  <updated>2023-11-19T23:05:55Z</updated>
  <content type="html">
   Part 1 of the Proof Parser Project
  </content>
 </entry>
 <entry>
  <title>emilpriver: homebrew-ocaml</title>
  <author>
   <name>emilpriver</name>
  </author>
  <link href="https://github.com/emilpriver/homebrew-ocaml" />
  <id>urn:rprimus:github:emilpriver:homebrew-ocaml</id>
  <published>2023-11-19T23:00:04Z</published>
  <updated>2023-11-19T23:00:04Z</updated>
  <content type="html">
   Homebrew client written in OCaml
  </content>
 </entry>
 <entry>
  <title>DieguinCode: Calculo-Lambda-Simplesmente-Tipado</title>
  <author>
   <name>DieguinCode</name>
  </author>
  <link href="https://github.com/DieguinCode/Calculo-Lambda-Simplesmente-Tipado" />
  <id>urn:rprimus:github:DieguinCode:Calculo-Lambda-Simplesmente-Tipado</id>
  <published>2023-11-19T20:26:15Z</published>
  <updated>2023-11-19T20:26:15Z</updated>
  <content type="html">
   O trabalho consiste em dado um termo do CÃ¡lculo Lambda Simplesmente Tipado iremos imprimir o tipo do referido termo
  </content>
 </entry>
 <entry>
  <title>igarnier: mlrasp</title>
  <author>
   <name>igarnier</name>
  </author>
  <link href="https://github.com/igarnier/mlrasp" />
  <id>urn:rprimus:github:igarnier:mlrasp</id>
  <published>2023-11-19T09:36:01Z</published>
  <updated>2023-11-19T09:36:01Z</updated>
  <content type="html">
   
  </content>
 </entry>
 <entry>
  <title>CharlesAverill: gocaml</title>
  <author>
   <name>CharlesAverill</name>
  </author>
  <link href="https://github.com/CharlesAverill/gocaml" />
  <id>urn:rprimus:github:CharlesAverill:gocaml</id>
  <published>2023-11-19T05:42:59Z</published>
  <updated>2023-11-19T05:42:59Z</updated>
  <content type="html">
   A Go engine for OCaml
  </content>
 </entry>
 <entry>
  <title>ricksterhd123: hellocaml</title>
  <author>
   <name>ricksterhd123</name>
  </author>
  <link href="https://github.com/ricksterhd123/hellocaml" />
  <id>urn:rprimus:github:ricksterhd123:hellocaml</id>
  <published>2023-11-19T00:40:54Z</published>
  <updated>2023-11-19T00:40:54Z</updated>
  <content type="html">
   
  </content>
 </entry>
 <entry>
  <title>thedebugger: ocaml_play</title>
  <author>
   <name>thedebugger</name>
  </author>
  <link href="https://github.com/thedebugger/ocaml_play" />
  <id>urn:rprimus:github:thedebugger:ocaml_play</id>
  <published>2023-11-18T22:49:27Z</published>
  <updated>2023-11-18T22:49:27Z</updated>
  <content type="html">
   
  </content>
 </entry>
 <entry>
  <title>zhezhouzz: language_utils</title>
  <author>
   <name>zhezhouzz</name>
  </author>
  <link href="https://github.com/zhezhouzz/language_utils" />
  <id>urn:rprimus:github:zhezhouzz:language_utils</id>
  <published>2023-11-18T21:28:39Z</published>
  <updated>2023-11-18T21:28:39Z</updated>
  <content type="html">
   
  </content>
 </entry>
 <entry>
  <title>vamsikri-hash: lambdaCalculus</title>
  <author>
   <name>vamsikri-hash</name>
  </author>
  <link href="https://github.com/vamsikri-hash/lambdaCalculus" />
  <id>urn:rprimus:github:vamsikri-hash:lambdaCalculus</id>
  <published>2023-11-18T20:49:00Z</published>
  <updated>2023-11-18T20:49:00Z</updated>
  <content type="html">
   
  </content>
 </entry>
 <entry>
  <title>vidurkhanal: morsec</title>
  <author>
   <name>vidurkhanal</name>
  </author>
  <link href="https://github.com/vidurkhanal/morsec" />
  <id>urn:rprimus:github:vidurkhanal:morsec</id>
  <published>2023-11-18T19:19:07Z</published>
  <updated>2023-11-18T19:19:07Z</updated>
  <content type="html">
   Ocaml implementation of Haskel&#039;s Parsec
  </content>
 </entry>
 <entry>
  <title>ghuysmans: caml2csl</title>
  <author>
   <name>ghuysmans</name>
  </author>
  <link href="https://github.com/ghuysmans/caml2csl" />
  <id>urn:rprimus:github:ghuysmans:caml2csl</id>
  <published>2023-11-18T18:48:55Z</published>
  <updated>2023-11-18T18:48:55Z</updated>
  <content type="html">
   Caml Light to Caml Special Light (almost OCaml) translator, resurrected from INRIA archives
  </content>
 </entry>
 <entry>
  <title>Edivad99: interproc-docker</title>
  <author>
   <name>Edivad99</name>
  </author>
  <link href="https://github.com/Edivad99/interproc-docker" />
  <id>urn:rprimus:github:Edivad99:interproc-docker</id>
  <published>2023-11-18T17:51:27Z</published>
  <updated>2023-11-18T17:51:27Z</updated>
  <content type="html">
   
  </content>
 </entry>
 <entry>
  <title>emilmyresten: httpserver</title>
  <author>
   <name>emilmyresten</name>
  </author>
  <link href="https://github.com/emilmyresten/httpserver" />
  <id>urn:rprimus:github:emilmyresten:httpserver</id>
  <published>2023-11-18T15:23:19Z</published>
  <updated>2023-11-18T15:23:19Z</updated>
  <content type="html">
   A http-server in ocaml that always responds the same thing. Just for learning.
  </content>
 </entry>
 <entry>
  <title>epalom2: ProgLang-in-Ocaml</title>
  <author>
   <name>epalom2</name>
  </author>
  <link href="https://github.com/epalom2/ProgLang-in-Ocaml" />
  <id>urn:rprimus:github:epalom2:ProgLang-in-Ocaml</id>
  <published>2023-11-18T14:53:31Z</published>
  <updated>2023-11-18T14:53:31Z</updated>
  <content type="html">
   
  </content>
 </entry>
 <entry>
  <title>kxcdev: kxc-melange-react-native-template</title>
  <author>
   <name>kxcdev</name>
  </author>
  <link href="https://github.com/kxcdev/kxc-melange-react-native-template" />
  <id>urn:rprimus:github:kxcdev:kxc-melange-react-native-template</id>
  <published>2023-11-18T09:08:50Z</published>
  <updated>2023-11-18T09:08:50Z</updated>
  <content type="html">
   kxc-melange-react-native-template - a template / sample project for OCaml (Melange) &amp; React Native based mobile application
  </content>
 </entry>
 <entry>
  <title>JosephPrichard: OCaml99</title>
  <author>
   <name>JosephPrichard</name>
  </author>
  <link href="https://github.com/JosephPrichard/OCaml99" />
  <id>urn:rprimus:github:JosephPrichard:OCaml99</id>
  <published>2023-11-18T02:03:31Z</published>
  <updated>2023-11-18T02:03:31Z</updated>
  <content type="html">
   Solving the classic 99 problems using OCaml
  </content>
 </entry>
</feed>
