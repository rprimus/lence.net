<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
<link rel="self" type="application/atom+xml" href="http://lence.net/github-racket.atom"/>
<id>urn:rprimus:github:newracketrepos</id>
<updated>2022-06-10T02:00:24Z</updated>
<title type='text'>New GitHub Racket Repos</title>
 <entry>
  <title>hammersam: racket-featherweight</title>
  <author>
   <name>hammersam</name>
  </author>
  <link href="https://github.com/hammersam/racket-featherweight" />
  <id>urn:rprimus:github:hammersam:racket-featherweight</id>
  <published>2022-06-10T02:00:24Z</published>
  <updated>2022-06-10T02:00:24Z</updated>
  <content type="html">
   This is a project following the textbook of IU compiler course(https://github.com/IUCompilerCourse). You can get a full working compiler that compiles a non-trivial amount of racket in the end. For some reason, I decided to leave this project temporarily, but eventually I will come back to finish it.
  </content>
 </entry>
 <entry>
  <title>ChristineWidden: CSC430_Assignment7</title>
  <author>
   <name>ChristineWidden</name>
  </author>
  <link href="https://github.com/ChristineWidden/CSC430_Assignment7" />
  <id>urn:rprimus:github:ChristineWidden:CSC430_Assignment7</id>
  <published>2022-06-09T21:29:36Z</published>
  <updated>2022-06-09T21:29:36Z</updated>
  <content type="html">
   A simulator for a somewhat rudimentary programming language, complete with strings, booleans, numbers, lambdas, functions, variables, arrays, and mutable values. Implemented using Typed Racket.
  </content>
 </entry>
 <entry>
  <title>cmsc430: a86-interpreter</title>
  <author>
   <name>cmsc430</name>
  </author>
  <link href="https://github.com/cmsc430/a86-interpreter" />
  <id>urn:rprimus:github:cmsc430:a86-interpreter</id>
  <published>2022-06-09T18:21:20Z</published>
  <updated>2022-06-09T18:21:20Z</updated>
  <content type="html">
   An interpreter for a restricted subset of the x86-64 assembly language.
  </content>
 </entry>
 <entry>
  <title>zielinsky: logic-circuit-simulator</title>
  <author>
   <name>zielinsky</name>
  </author>
  <link href="https://github.com/zielinsky/logic-circuit-simulator" />
  <id>urn:rprimus:github:zielinsky:logic-circuit-simulator</id>
  <published>2022-06-09T10:31:53Z</published>
  <updated>2022-06-09T10:31:53Z</updated>
  <content type="html">
   Synchronous logic circuit simulator
  </content>
 </entry>
 <entry>
  <title>ars-qq: sicp</title>
  <author>
   <name>ars-qq</name>
  </author>
  <link href="https://github.com/ars-qq/sicp" />
  <id>urn:rprimus:github:ars-qq:sicp</id>
  <published>2022-06-09T10:12:25Z</published>
  <updated>2022-06-09T10:12:25Z</updated>
  <content type="html">
   Ð·Ð°Ð´Ð°Ð½Ð¸Ñ Ð¸Ð· ÐºÐ½Ð¸Ð³Ð¸ sicp
  </content>
 </entry>
 <entry>
  <title>sorawee: sorawee-test2</title>
  <author>
   <name>sorawee</name>
  </author>
  <link href="https://github.com/sorawee/sorawee-test2" />
  <id>urn:rprimus:github:sorawee:sorawee-test2</id>
  <published>2022-06-09T00:55:27Z</published>
  <updated>2022-06-09T00:55:27Z</updated>
  <content type="html">
   
  </content>
 </entry>
 <entry>
  <title>sorawee: sorawee-test</title>
  <author>
   <name>sorawee</name>
  </author>
  <link href="https://github.com/sorawee/sorawee-test" />
  <id>urn:rprimus:github:sorawee:sorawee-test</id>
  <published>2022-06-08T23:19:45Z</published>
  <updated>2022-06-08T23:19:45Z</updated>
  <content type="html">
   
  </content>
 </entry>
 <entry>
  <title>celikomerfaruk: basic-racket-interpereter</title>
  <author>
   <name>celikomerfaruk</name>
  </author>
  <link href="https://github.com/celikomerfaruk/basic-racket-interpereter" />
  <id>urn:rprimus:github:celikomerfaruk:basic-racket-interpereter</id>
  <published>2022-06-08T19:53:26Z</published>
  <updated>2022-06-08T19:53:26Z</updated>
  <content type="html">
   
  </content>
 </entry>
 <entry>
  <title>Davisino: Solitaire-In-Racket</title>
  <author>
   <name>Davisino</name>
  </author>
  <link href="https://github.com/Davisino/Solitaire-In-Racket" />
  <id>urn:rprimus:github:Davisino:Solitaire-In-Racket</id>
  <published>2022-06-08T15:39:01Z</published>
  <updated>2022-06-08T15:39:01Z</updated>
  <content type="html">
   Seven and Half Solitaire
  </content>
 </entry>
 <entry>
  <title>NSFF: TrainProject</title>
  <author>
   <name>NSFF</name>
  </author>
  <link href="https://github.com/NSFF/TrainProject" />
  <id>urn:rprimus:github:NSFF:TrainProject</id>
  <published>2022-06-08T11:40:14Z</published>
  <updated>2022-06-08T11:40:14Z</updated>
  <content type="html">
   This project is a train simulation project where several trains have to follow tracks and use an algorithm to not collide with eachother while reacher their destination. This project is a 2nd year Computer science project made in 2017 and was not fully functional at the end of the year.
  </content>
 </entry>
 <entry>
  <title>NSFF: DigDug</title>
  <author>
   <name>NSFF</name>
  </author>
  <link href="https://github.com/NSFF/DigDug" />
  <id>urn:rprimus:github:NSFF:DigDug</id>
  <published>2022-06-08T11:31:20Z</published>
  <updated>2022-06-08T11:31:20Z</updated>
  <content type="html">
   A small Dig dug Game Project made for my First Year Computer Science at the Free university of Brussels (VUB). Made in 2016
  </content>
 </entry>
 <entry>
  <title>gamedevelope: computer-science</title>
  <author>
   <name>gamedevelope</name>
  </author>
  <link href="https://github.com/gamedevelope/computer-science" />
  <id>urn:rprimus:github:gamedevelope:computer-science</id>
  <published>2022-06-08T11:28:14Z</published>
  <updated>2022-06-08T11:28:14Z</updated>
  <content type="html">
   computer science
  </content>
 </entry>
 <entry>
  <title>gussmith23: monotonic-rule-interpreter</title>
  <author>
   <name>gussmith23</name>
  </author>
  <link href="https://github.com/gussmith23/monotonic-rule-interpreter" />
  <id>urn:rprimus:github:gussmith23:monotonic-rule-interpreter</id>
  <published>2022-06-08T02:18:35Z</published>
  <updated>2022-06-08T02:18:35Z</updated>
  <content type="html">
   
  </content>
 </entry>
</feed>
